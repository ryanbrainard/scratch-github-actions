name: ci

on: [ push ]

defaults:
  run:
    shell: bash
    working-directory: ./src/github.com/ryanbrainard/scratch-github-actions

jobs:
  tests:
    runs-on: [ ubuntu-latest ]
    strategy:
      matrix:
        include:
          - name: m1-s1
          - name: m1-s2
    steps:
      - uses: actions/checkout@v2
        with:
          path: ./src/github.com/${{ github.repository }}
      - uses: actions/setup-go@v2
      - name: run ${{ matrix.name }} with retry
        uses: nick-invision/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 60
          retry_on: error
          warning_on_retry: true
          command: |
            cd ./src/github.com/${{ github.repository }}
            echo ${{ matrix.name }}
            test -f /tmp/hello
          on_retry_command: |
            cd ./src/github.com/${{ github.repository }}
            echo ${{ matrix.name }}
            touch /tmp/hello


  # dummy job to wait until block merge until all tests completed
  done:
    runs-on: [ ubuntu-latest ]
    needs: [ tests ]
    steps:
      - run: echo done
        working-directory: /
      - uses: actions/github-script@v3
          with:
            github-token: ${{secrets.GITHUB_TOKEN}}
            script: |
              const owner = 'ryanbrainard'
              const repo = 'scratch-github-actions'
              const run_id = '678080008'

              github.actions.getWorkflowRun({
                owner,
                repo,
                run_id,
              }).then(({data: run}) => {
                github.checks.listForSuite({
                  owner,
                  repo,
                  check_suite_id: run.check_suite_id,
                }).then(({data: {check_runs}}) => {
                  check_runs.forEach(check_run => {
                    github.checks.listAnnotations({
                      owner,
                      repo,
                      check_run_id: check_run.id
                    }).then(({data: annotations}) => {
                      annotations.forEach(annotation => {
                        console.log(check_run.output.title)
                        console.log(annotation.message)
                      })
                    })
                  })
                })
              })
